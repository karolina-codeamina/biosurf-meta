# -*- coding: utf-8 -*-
"""PlotsBioSurfDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbhR-pnc62QYLeAGgZwOeFXEZ8J0q5mf
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import json

#change display settings for whole dfs
pd.set_option('display.max_rows', None)       # Display all rows
pd.set_option('display.max_columns', None)    # Display all columns
pd.set_option('display.width', None)          # Disable line wrapping
pd.set_option('display.max_colwidth', None)   # Show full column width

#reading json files downloaded from biosurfdb
#list of file "name" -> df
name_list = [
    "organism",
    "gene",
    "protein",
    "pathway",
    "surfactant",
    "metagenome",
    "biosurfactant",
    "organism_pathway"
]

#loading data into df inside a dict for all files
df_dict = {}
for name in name_list:

  # Load json
  with open(f'{name}.json') as f:
    raw_data = json.load(f)

  try:
      # normalizing data (without success)
      data_normalized = pd.json_normalize(raw_data['success'])
  except Exception as e:
      print(f"An error occurred during normalization: {e}")
  #Save to dict with proper name
  df_dict[f"{name}_df"] = data_normalized

  #Show df
  display(df_dict[f"{name}_df"].head())

#merge dfs into df_combined

#biosurfactant+surfactant
df_dict["biosurfactant_surfactant_df_combined"] = pd.merge(df_dict["biosurfactant_df"], df_dict["surfactant_df"], on='surfactant_id', how='inner')

#organism_pathway+additional columns
  #0.change column names to be common
  #gene_df:  gene_ncbi -> gene_GI
  #pathway_df: name -> pathway
  #protein_df: protein_ncbi -> protein_GI
  #organism_df: binomial_name -> organism
df_dict['gene_df'].rename(columns={'gene_ncbi': 'Gene_GI'}, inplace=True)
df_dict['pathway_df'].rename(columns={'name': 'Pathway'}, inplace=True)
df_dict['protein_df'].rename(columns={'protein_ncbi': 'Protein_GI'}, inplace=True)
df_dict['organism_df'].rename(columns={'binomial_name': 'Organism'}, inplace=True)

df_dict["organism_pathway_df_combined"] = pd.merge(df_dict["organism_pathway_df"], df_dict["organism_df"], on='Organism', how='left')
df_dict["organism_pathway_df_combined"] = pd.merge(df_dict["organism_pathway_df"], df_dict["gene_df"], on='Gene_GI', how='left')
df_dict["organism_pathway_df_combined"] = pd.merge(df_dict["organism_pathway_df"], df_dict["pathway_df"], on='Pathway', how='left')
df_dict["organism_pathway_df_combined"] = pd.merge(df_dict["organism_pathway_df"], df_dict["protein_df"], on='Protein_GI', how='left')

#metagenome+organism_pathway by reference -> filter
df_dict["metagenome_df"].rename(columns={'reference': 'Reference'}, inplace=True)
#filter None in Reference in metagenome_df
df_dict["metagenome_df"] = df_dict["metagenome_df"][df_dict["metagenome_df"]["Reference"].notna()]
df_dict["metagenome_df"] = df_dict["metagenome_df"][['environment', 'Reference']]
display(df_dict["metagenome_df"])
df_dict["metagenome_organism_pathway_df_combined"] = pd.merge(df_dict["metagenome_df"], df_dict["organism_pathway_df"], on='Reference', how='left')

#pathway+biosurfactant by reference

df_dict["pathway_biosurfactant_df_combined"] = pd.merge(df_dict["pathway_df"], df_dict["biosurfactant_df"], on='reference', how='inner')

#Display combined dfs
display(df_dict['organism_pathway_df_combined'])
display(df_dict['metagenome_organism_pathway_df_combined'])
display(df_dict['pathway_biosurfactant_df_combined'])

#plot 1 (table) - Biosurfactants classification by classes

biosurfactant_surfactant_df_combined_cleaned = df_dict['biosurfactant_surfactant_df_combined']
map = {
    'Polymeric Surfactants': 'Polymeric biosurfactants',
    'Polymeric surfactants': 'Polymeric biosurfactants',
    'Glycolipid': 'Glycolipids',
    'Lipopeptide': 'Lipopeptides',
    ' lipopeptide': 'Lipopeptides',
    'Biosurfactant': 'Other biosurfactants',
    'Biosurfactants': 'Other biosurfactants'
}
biosurfactant_surfactant_df_combined_cleaned['class_name'] = biosurfactant_surfactant_df_combined_cleaned['class_name'].replace(map)
biosurf_by_class = biosurfactant_surfactant_df_combined_cleaned.groupby('class_name')['surfactant_name'].nunique()
display(biosurf_by_class)
biosurf_by_class_plot = plt.bar(biosurf_by_class.index, biosurf_by_class.values, color='orange')
plt.xticks(rotation=90)
plt.xlabel("Clase de biosurfactante")
plt.ylabel("Cantidad de biosurfactantes")
plt.title("Cantidad de biosurfactantes por clase")
plt.savefig("biosurfactants_by_class.png", dpi=300, bbox_inches='tight')
plt.show(biosurf_by_class_plot)

#PLOT 2.1 - Distribution of biosurfactants production ability in bacterial genera (pathways)
pathways_in_organism = df_dict['organism_pathway_df_combined'].groupby('Pathway')['Organism'].nunique()
display(pathways_in_organism)
#normalized version
pathways_in_organism = pathways_in_organism[pathways_in_organism.values < 100]

pathways_in_organism_plot = plt.bar(pathways_in_organism.index, pathways_in_organism.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Pathway")
plt.ylabel("Number of organisms")
plt.title("Number of organisms by pathway")
plt.savefig("organisms_by_pathway_normalized.png", dpi=300, bbox_inches='tight')
plt.show(pathways_in_organism_plot)

#PLOT 2.2 - Distribution of  biosurfactants production ability in metagenomes (pathways)

nr_pathways_in_metagenome = df_dict['organism_pathway_df_combined'].groupby('Pathway')['Reference'].nunique()
#normalized version
nr_pathways_in_metagenome = nr_pathways_in_metagenome[nr_pathways_in_metagenome.values < 30]

display(nr_pathways_in_metagenome)
nr_pathways_in_metagenome_plot = plt.bar(nr_pathways_in_metagenome.index, nr_pathways_in_metagenome.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Pathway")
plt.ylabel("Number of metagenomes")
plt.title("Number of metagenomes by pathway")
plt.savefig("metagenomes_by_pathway_normalized.png", dpi=300, bbox_inches='tight')
plt.show(nr_pathways_in_metagenome_plot)

#reverse plot

nr_pathways_in_metagenome_reverse = df_dict['organism_pathway_df_combined'].groupby('Reference')['Pathway'].nunique()
#normalized version
nr_pathways_in_metagenome_reverse = nr_pathways_in_metagenome_reverse[nr_pathways_in_metagenome_reverse.values > 3]
nr_pathways_in_metagenome_reverse = nr_pathways_in_metagenome_reverse[nr_pathways_in_metagenome_reverse.values < 10]

display(nr_pathways_in_metagenome_reverse)
nr_pathways_in_metagenome_reverse_plot = plt.bar(nr_pathways_in_metagenome_reverse.index, nr_pathways_in_metagenome_reverse.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Metagenome")
plt.ylabel("Number of pathways")
plt.title("Number of pathways by metagenomes")
plt.savefig("metagenomes_by_pathway_reverse_metagenomelist.png", dpi=300, bbox_inches='tight')
plt.show(nr_pathways_in_metagenome_reverse_plot)

#PLOT 3 - Amount of genes included in metabolical pathways
nr_genes_in_pathway = df_dict['organism_pathway_df_combined'].groupby('Pathway')['Gene_GI'].nunique()
#normalized version
#nr_genes_in_pathway = nr_genes_in_pathway[nr_genes_in_pathway.values < 200]

nr_genes_in_pathway_plot = plt.bar(nr_genes_in_pathway.index, nr_genes_in_pathway.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Ruta metabólica")
plt.ylabel("Cantidad de genes")
plt.title("Cantidad de genes por ruta metabólica")
plt.savefig("genes_by_pathway_normalized.png", dpi=300, bbox_inches='tight')
plt.show(nr_genes_in_pathway_plot)

#plot 3_colored

nr_genes_in_pathway = df_dict['organism_pathway_df_combined'].groupby('Pathway')['Gene_GI'].nunique()

# Create map Pathway → Family
pathway_family_map = df_dict['organism_pathway_df_combined'].drop_duplicates(subset='Pathway')[['Pathway', 'Family']].set_index('Pathway')['Family']
# Make sure indexes match
families = pathway_family_map.loc[nr_genes_in_pathway.index]

# Assign colors to unique families
import seaborn as sns
unique_families = families.unique()
palette = sns.color_palette("colorblind", n_colors=len(unique_families))
color_map = dict(zip(unique_families, palette))
bar_colors = families.map(color_map)

# Plot
plt.figure(figsize=(10, 6))
bars = plt.bar(nr_genes_in_pathway.index, nr_genes_in_pathway.values, color=bar_colors)

plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Ruta metabólica")
plt.ylabel("Cantidad de genes")
plt.title("Cantidad de genes por ruta metabólica")

from matplotlib.patches import Patch
legend_handles = [Patch(color=color_map[f], label=f) for f in unique_families]
plt.legend(handles=legend_handles, title='Familia')

plt.savefig("genes_by_pathway_colored.png", dpi=300, bbox_inches='tight')
plt.show(nr_genes_in_pathway_plot)

#PLOT metagenome_by_organism
#plot 4.X** - Distribution of biosurfactants producing bacteria in metagenomes

nr_metagenomes_by_organism = df_dict['organism_pathway_df_combined'].groupby('Organism')['Reference'].nunique()

nr_metagenomes_by_organism_normalized = nr_metagenomes_by_organism[nr_metagenomes_by_organism.values > 4]
display(nr_metagenomes_by_organism_normalized)

nr_metagenomes_by_organism_normalized_plot = plt.bar(nr_metagenomes_by_organism_normalized.index, nr_metagenomes_by_organism_normalized.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Organism")
plt.ylabel("Number of metagenomes")
plt.title("Number of metagenomes by organism")
plt.savefig("metagenomes_by_organism.png", dpi=300, bbox_inches='tight')
plt.show(nr_metagenomes_by_organism_normalized_plot)

#cleaned by genera version

nr_metagenomes_by_organism_cleaned = df_dict['organism_pathway_df_combined']

map = {
    'Acinetobacter baumannii': 'Acinetobacter sp.',
    'Acinetobacter calcoaceticus': 'Acinetobacter sp.',
    'Alcaligenes faecalis': 'Alcaligenes sp.',
    'Bacillus subtilis': 'Bacillus sp.',
    'Bacillus licheniformis': 'Bacillus sp.',
    'Burkholderia cepacia': 'Burkholderia sp.',
    'Comamonas testosteroni': 'Comamonas sp.',
    'Methylobacterium extorquens': 'Methylobacterium sp.',
    'Pseudomonas aeruginosa': 'Pseudomonas sp.',
    'Pseudomonas fluorescens': 'Pseudomonas sp.',
    'Pseudomonas pseudoalcaligenes': 'Pseudomonas sp.',
    'Pseudomonas putida': 'Pseudomonas sp.',
    'Pseudomonas stutzeri': 'Pseudomonas sp.',
    'Ralstonia eutropha': 'Ralstonia sp.',
    'Ralstonia pickettii': 'Ralstonia sp.',
    'Rhodococcus erythropolis': 'Rhodococcus sp.',
    'Rhodococcus jostii': 'Rhodococcus sp.',
    'Rhodococcus opacus': 'Rhodococcus sp.',
    'Rhodococcus rhodochrous': 'Rhodococcus sp.',
    'Sphingomonas paucimobilis': 'Sphingomonas sp.',
    'uncultured bacterium': 'Other bacterium',
    'bacterium': 'Other bacterium'
}
nr_metagenomes_by_organism_cleaned['Organism'] = nr_metagenomes_by_organism_cleaned['Organism'].replace(map)
nr_metagenomes_by_organism_cleaned = nr_metagenomes_by_organism_cleaned.groupby('Organism')['Reference'].nunique()

nr_metagenomes_by_organism_cleaned_normalized = nr_metagenomes_by_organism_cleaned[nr_metagenomes_by_organism_cleaned.values > 4]

nr_metagenomes_by_organism_cleaned_normalized_plot = plt.bar(nr_metagenomes_by_organism_cleaned_normalized.index, nr_metagenomes_by_organism_cleaned_normalized.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Organismo")
plt.ylabel("Cantidad de metagenomas")
plt.title("Cantidad de metagenomas por organismo")
plt.savefig("metagenomes_by_organism_cleaned_normalized.png", dpi=300, bbox_inches='tight')
plt.show(nr_metagenomes_by_organism_cleaned_normalized_plot)
display(nr_metagenomes_by_organism_cleaned_normalized)

#without normalization
nr_metagenomes_by_organism_cleaned_plot = plt.bar(nr_metagenomes_by_organism_cleaned.index, nr_metagenomes_by_organism_cleaned.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Organismo")
plt.ylabel("Cantidad de metagenomas")
plt.title("Cantidad de metagenomas por organismo")
plt.savefig("metagenomes_by_organism_cleaned.png", dpi=300, bbox_inches='tight')
plt.show(nr_metagenomes_by_organism_cleaned_plot)

#reverse plot

nr_metagenomes_by_organism_cleaned_reversed = nr_metagenomes_by_organism_cleaned.groupby('Reference')['Organism'].nunique()

nr_metagenomes_by_organism_cleaned_reversed = nr_metagenomes_by_organism_cleaned_reversed[nr_metagenomes_by_organism_cleaned_reversed.values > 3]
nr_metagenomes_by_organism_cleaned_reversed = nr_metagenomes_by_organism_cleaned_reversed[nr_metagenomes_by_organism_cleaned_reversed.values < 200]


nr_metagenomes_by_organism_cleaned_reversed_plot = plt.bar(nr_metagenomes_by_organism_cleaned_reversed.index, nr_metagenomes_by_organism_cleaned_reversed.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Metagenome")
plt.ylabel("Number of organisms")
plt.title("Number of organisms by metagenome")
plt.savefig("metagenomes_by_organism_cleaned_reversed.png", dpi=300, bbox_inches='tight')
plt.show(nr_metagenomes_by_organism_cleaned_reversed_plot)
display(nr_metagenomes_by_organism_cleaned_reversed)

#list of metagenomes comparison

metagenomes_list_comparison = pd.merge(nr_pathways_in_metagenome_reverse, nr_metagenomes_by_organism_cleaned_reversed, on='Reference', how='inner')
display(metagenomes_list_comparison)

#plot Metagenome distribution by environment from TSV file from PROMOTOR

df_environments = pd.read_csv("metagenomes.tsv", sep="\t")

nr_metagenomes_by_environments = df_environments.groupby('category')['environment'].nunique()

display(nr_metagenomes_by_environments)

nr_metagenomes_by_environments_plot = plt.bar(nr_metagenomes_by_environments.index, nr_metagenomes_by_environments.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Medio ambiente")
plt.ylabel("Cantidad de metagenomas")
plt.title("Cantidad de metagenomas por medio ambiente")
plt.savefig("metagenomes_by_environment.png", dpi=300, bbox_inches='tight')
plt.show(nr_metagenomes_by_environments_plot)

#plots for species analysis in mgr
#PLOT genes_by_organism

#cleaned by genera version

nr_genes_in_organism_cleaned = df_dict['organism_pathway_df_combined']

map = {
    'Acinetobacter baumannii': 'Acinetobacter sp.',
    'Acinetobacter calcoaceticus': 'Acinetobacter sp.',
    'Alcaligenes faecalis': 'Alcaligenes sp.',
    'Bacillus subtilis': 'Bacillus sp.',
    'Bacillus licheniformis': 'Bacillus sp.',
    'Bacillus amyloliquefaciens': 'Bacillus sp.',
    'Bacillus velezensis': 'Bacillus sp.',
    'Burkholderia cepacia': 'Burkholderia sp.',
    'Comamonas testosteroni': 'Comamonas sp.',
    'Escherichia coli': 'Escherichia sp.',
    'Methylobacterium extorquens': 'Methylobacterium sp.',
    'Methanosarcina barkeri': 'Methanosarcina sp.',
    'Methanosarcina mazei': 'Methanosarcina sp.',
    'Methanosarcina siciliae': 'Methanosarcina sp.',
    'Methanosarcina thermophila': 'Methanosarcina sp.',
    'Methylosinus sporium': 'Methylosinus sp.',
    'Methylosinus trichosporium': 'Methylosinus sp.',
    'Pseudomonas aeruginosa': 'Pseudomonas sp.',
    'Pseudomonas fluorescens': 'Pseudomonas sp.',
    'Pseudomonas pseudoalcaligenes': 'Pseudomonas sp.',
    'Pseudomonas putida': 'Pseudomonas sp.',
    'Pseudomonas stutzeri': 'Pseudomonas sp.',
    'Pseudomonas mendocina': 'Pseudomonas sp.',
    'Pseudomonas viridiflava': 'Pseudomonas sp.',
    'Ralstonia eutropha': 'Ralstonia sp.',
    'Ralstonia pickettii': 'Ralstonia sp.',
    'Rhodococcus erythropolis': 'Rhodococcus sp.',
    'Rhodococcus jostii': 'Rhodococcus sp.',
    'Rhodococcus opacus': 'Rhodococcus sp.',
    'Rhodococcus rhodochrous': 'Rhodococcus sp.',
    'Sphingomonas paucimobilis': 'Sphingomonas sp.',
    'Salmonella enterica subsp. enterica serovar Enteritidis': 'Salmonella sp.',
    'Salmonella enterica subsp. enterica serovar Montevideo str.': 'Salmonella sp.',
    'uncultured bacterium': 'Other bacterium',
    'bacterium': 'Other bacterium'
}
nr_genes_in_organism_cleaned['Organism'] = nr_genes_in_organism_cleaned['Organism'].replace(map)
nr_genes_in_organism_cleaned = nr_genes_in_organism_cleaned.groupby('Organism')['Gene_GI'].nunique()

nr_genes_in_organism_cleaned_normalized = nr_genes_in_organism_cleaned[nr_genes_in_organism_cleaned.values > 10]

nr_genes_in_organism_cleaned_normalized_plot = plt.bar(nr_genes_in_organism_cleaned_normalized.index, nr_genes_in_organism_cleaned_normalized.values, color='orange')
plt.xticks(rotation=90, fontsize=6)
plt.xlabel("Organismo")
plt.ylabel("Cantidad de genes")
plt.title("Cantidad de genes por organismo")
plt.savefig("genes_by_organism_cleaned_normalized.png", dpi=300, bbox_inches='tight')
plt.show(nr_genes_in_organism_cleaned_normalized_plot)
display(nr_genes_in_organism_cleaned_normalized)

#df_environments
df_ncbi_choose = pd.read_csv("unikalne_wartosci.tsv", sep="\t")
df_ncbi_choose.columns = ['reference']

ncbi_environment_combined = pd.merge(df_ncbi_choose, df_environments, on='reference', how='inner')
ncbi_environment_combined = ncbi_environment_combined[['reference', 'category']]
display(ncbi_environment_combined)
count_ncbi_environment = ncbi_environment_combined.groupby('category')['reference'].nunique()
display(count_ncbi_environment)